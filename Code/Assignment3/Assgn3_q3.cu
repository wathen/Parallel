#include <cuda.h>
#include <curand_kernel.h>

#include <stdio.h>
#include <math.h>
#include "time_it.h"
#include <iostream>
using namespace std;
#define N (16*16)
#define THREADS_PER_BLOCK 8

//typedef curandState randstate_t;
typedef curandStatePhilox4_32_10_t randstate_t;

struct kernel_arg {
    float *x;
    unsigned int n;
    unsigned int m;
    unsigned int blksize;
    unsigned int nblks;
};

static void HandleError( cudaError_t err,
                         const char *file,
                         int line ) {
    if (err != cudaSuccess) {
        printf( "%s in %s at line %d\n", cudaGetErrorString( err ),
                file, line );
        exit( EXIT_FAILURE );
    }
}
#define HANDLE_ERROR( err ) (HandleError( err, __FILE__, __LINE__ ))


__global__ void setup_kernel(uint n, randstate_t *state)
{
  uint myId = blockDim.x * blockIdx.x + threadIdx.x;
  /* Each thread gets same seed, a different sequence number, no offset */
  if(myId < n)
    curand_init(1234, myId, 0, &state[myId]);
}


__global__ void rand_cuda(randstate_t *state, unsigned int n, unsigned int m, float *x) {
  unsigned int blockBase = blockDim.x * blockIdx.x;
  unsigned int myId = blockBase + threadIdx.x;
  uint n_threadsTotal = gridDim.x * blockDim.x;
    randstate_t *myRandState = &(state[myId]);

  if(n_threadsTotal*(m-1) + myId < n) {
    for(int j = 0; j < m; j++) {  // each word generated by this thread
      x[n_threadsTotal*j + myId] = curand(myRandState);
    }
  }
}


void print_vec(float *x, unsigned int n, const char *fmt, const char *who) {
    printf("%s = ", who);
    for(int i = 0; i < n; i++) {
        if(i > 0) printf(", ");
            printf(fmt, x[i]);
        }
    if(n > 10) printf(", ...");
    printf("\n");
}

float rndm(float *x, unsigned int n, unsigned int m, unsigned int blksize, unsigned int nblks) {
    float *dev_x;
    int size = n*sizeof(float);

    randstate_t *dev_randState;
    uint sz_rnd_st = n*sizeof(dev_randState);
    HANDLE_ERROR(cudaMalloc((void **)(&dev_randState), sz_rnd_st));
    setup_kernel<<<nblks, blksize>>>(n, dev_randState);

    cudaMalloc((void**)(&dev_x), size);
    rand_cuda<<<nblks, blksize>>>(dev_randState, n, m, dev_x);
    cudaMemcpy(x, dev_x, size, cudaMemcpyDeviceToHost);

    cudaFree(dev_randState);
    cudaFree(dev_x);
    return *x;
}

void do_timing(void *void_arg) {
  struct kernel_arg *argk = (struct kernel_arg *)(void_arg);
  rndm(argk->x, argk->n, argk->m, argk->blksize, argk -> nblks);
  cudaDeviceSynchronize();
}

int main(int argc, char *argv[]) {
    unsigned int n = atoi(argv[1]);
    unsigned int blksize = atoi(argv[2]);
    float *x;
    int size = n*sizeof(float);
    x  = (float *)malloc(size);

    struct kernel_arg argk;
    struct time_it_raw *tr = time_it_create(10);
    struct time_it_stats stats;
    cudaDeviceProp prop;

    int ndev;
    cudaGetDeviceCount(&ndev);
    cudaGetDeviceProperties(&prop, 0);
    printf("The GPU is a %s\n", prop.name);
    printf("Cuda capability %d.%d.\n", prop.major, prop.minor);
    unsigned int MaxBlks = prop.maxThreadsPerBlock;
    

    if (MaxBlks > blksize) {
          MaxBlks = blksize;
     }
    unsigned int nblks = ceil((float)(n)/(float)(blksize));
    unsigned int m = ceil((float)(n)/(float)(nblks*blksize));

    printf("\n  Random function:\n n = %i, blksize = %i, nblks = %i, m = %i\n", n, blksize, nblks, m);

    rndm(x, n, m, blksize, nblks);

    argk.n = n;
    argk.x = x;
    argk.m = m;
    argk.blksize = blksize;
    argk.nblks = nblks;
    time_it_run(tr, do_timing, (void *)(&argk));
    time_it_get_stats(tr, &stats);


    printf("Random: mean(T) = %10.3e, std(T) = %10.3e\n", stats.mean, stats.std);
    printf("Random numbers per second: %10.0f\n",floor(float(n)/stats.mean));
    
    return 0;
}
